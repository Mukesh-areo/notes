up
jijifrom bs4 import BeautifulSoup

# Assuming 'html_content' contains your HTML content
html_content = """
<html>
<body>
    <div id="main1">
        <p>Content 1</p>
    </div>
    <div id="main2">
        <p>Content 2</p>
    </div>
    <div id="main3">
        <p>Content 3</p>
    </div>
</body>
</html>
"""

# Parse the HTML content
soup = BeautifulSoup(html_content, 'html.parser')

# Find all main divs
main_divs = soup.find_all('div')

# Create a dictionary to store contents by main div id
contents = {}

# Extract and store contents in separate lists
for div in main_divs:
    # Get the id of the main div
    div_id = div.get('id')
    # Get the content inside the div
    content = div.get_text(strip=True)
    # Store content in the dictionary
    contents[div_id] = content

# Print the contents
for div_id, content in contents.items():
    print(f"Content for div '{div_id}': {content}")



---+
from bs4 import BeautifulSoup

# Assuming 'html_content' contains your HTML content
html_content = """
<html>
<body>
    <div id="main1">
        <p>Content 1</p>
    </div>
    <div id="main2">
        <p>Content 2</p>
    </div>
    <div id="main3">
        <p>Content 3</p>
    </div>
</body>
</html>
"""

# Parse the HTML content
soup = BeautifulSoup(html_content, 'html.parser')

# Find all main divs
main_divs = soup.find_all('div')

# Create a list to store contents for each main div
contents_lists = []

# Extract and store contents in separate lists
for div in main_divs:
    # Get the content inside the div
    content = div.get_text(strip=True)
    # Append content to the list
    contents_lists.append(content)

# Print the contents
for idx, content in enumerate(contents_lists):
    print(f"Content for div {idx + 1}: {content}")
--------







from bs4 import BeautifulSoup

# Assuming `html_content` contains your HTML content
html_content = """
<html>
<head>
</head>
<body>
    <div>Content 1</div>
    <div>Content 2</div>
    <p>Some other content</p>
    <div>Content 3</div>
</body>
</html>
"""

# Parse the HTML
soup = BeautifulSoup(html_content, 'html.parser')

# Find the <body> tag
body_tag = soup.find('body')

# Find all <div> tags inside the <body> tag
div_tags = body_tag.find_all('div')

# Store content of each <div> in a dictionary
div_content_dict = {}
for i, div_tag in enumerate(div_tags, start=1):
    div_content_dict[f"div_{i}"] = div_tag.text

# Print the dictionary
print(div_content_dict)

----++

from bs4 import BeautifulSoup

# Assuming `html_content` contains your HTML content
html_content = """
<html>
<head>
</head>
<body>
    <div>
        <div>Content 1</div>
        <div>Content 2</div>
    </div>
    <div>
        <div>Content 3</div>
        <div>Content 4</div>
    </div>
</body>
</html>
"""

# Parse the HTML
soup = BeautifulSoup(html_content, 'html.parser')

# Find the <body> tag
body_tag = soup.find('body')

# Find all <div> tags inside the <body> tag
div_tags = body_tag.find_all('div')

# Store content of each <div> in a dictionary
div_content_dict = {}
for i, div_tag in enumerate(div_tags, start=1):
    div_content_dict[f"div_{i}"] = div_tag.text

# Print the dictionary
print(div_content_dict)

-------




from bs4 import BeautifulSoup

# Example HTML content with different <div> structures
html_content = """
<html>
<head>
</head>
<body>
    <div>
        <div>Content 1</div>
        <div>Content 2</div>
    </div>
    <div>
        <div>Content 3</div>
        <div>Content 4</div>
    </div>
    <div>
        <div>
            <div>Content 5</div>
        </div>
    </div>
</body>
</html>
"""

# Parse the HTML
soup = BeautifulSoup(html_content, 'html.parser')

# Find all <div> tags inside the <body> tag
div_tags = soup.find_all('div')

# Store content of each <div> in a list
div_content_list = []
for div_tag in div_tags:
    nested_divs = div_tag.find_all('div')
    if len(nested_divs) > 1:
        div_content_list.append(str(div_tag))
    else:
        div_content_list.append(div_tag.text)

# Print the list
for i, content in enumerate(div_content_list, start=1):
    print(f"Content {i}: {content}")




import html2text

# Example list of strings containing HTML code
html_strings = [
    '<div><div>Content 1</div><div>Content 2</div></div>',
    '<div><div>Content 3</div><div>Content 4</div></div>'
]

# Initialize the HTML to text converter
converter = html2text.HTML2Text()

# Convert each HTML string to text
text_strings = [converter.handle(html_string) for html_string in html_strings]

# Print the converted text strings
for text_string in text_strings:
    print(text_string.strip())



------
import re

# Example HTML content with nested <div> tags
html_content = """
<div>
    <div>Content 1</div>
    <div>Content 2</div>
    <div>
        <div>Content 3</div>
        <div>Content 4</div>
    </div>
</div>
<div>
    <div>Content 5</div>
</div>
"""

# Define the regex pattern to match nested <div> tags
pattern = r'<div>((?:<(?!/div>)[^>]*>|(?R))*)</div>'

# Find all matches
matches = re.findall(pattern, html_content, flags=re.DOTALL)

# Print the matches
for match in matches:
    print(match.strip())


------_----

import streamlit as st
from bs4 import BeautifulSoup
import html2text

def convert_html_to_text(html_content):
    # Parse the HTML
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # Convert the parsed HTML back to a string
    html_string = str(soup)
    
    # Apply regex to split the string into a list of tags
    tags_list = re.findall(r'<[^>]+>', html_string)
    
    # Initialize the HTML to text converter
    converter = html2text.HTML2Text()
    
    # Convert each tag to text
    text_list = []
    for tag in tags_list:
        text = converter.handle(tag)
        text_list.append(text.strip())
    
    return text_list

# Streamlit app
def main():
    st.title('HTML to Text Converter')
    
    # File upload
    st.sidebar.title('Upload HTML File')
    uploaded_file = st.sidebar.file_uploader("Choose an HTML file", type=['html'])
    
    if uploaded_file is not None:
        html_content = uploaded_file.read()
        
        # Convert HTML to text
        text_list = convert_html_to_text(html_content)
        
        # Display converted text
        st.header('Converted Text:')
        for i, text in enumerate(text_list, start=1):
            st.write(f"{i}. {text}")

if __name__ == '__main__':
    main()

