from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from bs4 import BeautifulSoup

existing_dict = {
    '1 - Downloaded file lists\n2 - Start download - small file\n3 - Start download - large file\nPause - Pause download\nPlay - Resume download\nStop - Cancel download\n0 - Clear logs': '<ix:nonnumeric context="c1" continuedat="cont1" escape="false" id="f1" name="eg:DescriptionOfPolicy">',
    'Info\nThis application demonstrates the usage of Tizen download API\nThe application downloads files from\nhttp://techslides.com\nand\nhttp://download.blender.org\n. If these domains are not accessible it will not work.\nInfo\nYou can change the source location of files to download\nby changing the contents of\nurl1\nand\nurl2\nvariables in\nmain.js\nfile': '<ix:nonnumeric context="c1" continuedat="cont1" escape="false" id="f1" name="eg:DescriptionOfPolicy">',
    'Info\nYou can change the source location of files to download': '<ix:nonnumeric context="c1" continuedat="cont1" escape="false" id="f1" name="eg:sample">'
}

# Function to calculate cosine similarity
def calculate_similarity(text1, text2):
    vectorizer = CountVectorizer().fit_transform([text1, text2])
    vectors = vectorizer.toarray()
    return cosine_similarity(vectors)[0, 1]

# Function to tag text based on contextual similarity
def tag_text(html_content, existing_dict):
    soup = BeautifulSoup(html_content, 'html.parser')
    for tag in soup.find_all(text=True):
        for key, value in existing_dict.items():
            similarity = calculate_similarity(tag, key)
            if similarity >= 0.9:
                tag.replace_with(f'{value}{tag}{value}')
    return soup.prettify()

# Example usage
html_content = """
<html>
<body>
<p>1 - Downloaded file lists</p>
<p>Info</p>
<p>This application demonstrates the usage of Tizen download API</p>
</body>
</html>
"""

tagged_content = tag_text(html_content, existing_dict)
print(tagged_content)



from bs4 import BeautifulSoup

html_content = """
<html>
<body>
<p>1 - Downloaded file lists</p>
<p>Info</p>
<p>This application demonstrates the usage of Tizen download API</p>
</body>
</html>
"""

# Parse the HTML content
soup = BeautifulSoup(html_content, 'html.parser')

# Define the text content and attributes for the ix:nonNumeric tag
text_to_tag = "This application demonstrates the usage of Tizen download API"
attributes = {'some_attribute': 'some_value', 'another_attribute': 'another_value'}

# Find the paragraph containing the text to tag
paragraph_to_tag = soup.find('p', text=text_to_tag)

# Create the new ix:nonNumeric tag
tag = soup.new_tag('ix:nonNumeric', **attributes)
tag.string = text_to_tag

# Replace the paragraph containing the text with the new ix:nonNumeric tag
paragraph_to_tag.replace_with(tag)

# Print the modified HTML content
print(soup.prettify())
